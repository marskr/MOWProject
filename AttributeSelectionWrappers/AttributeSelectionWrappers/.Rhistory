install.packages("party")
library("party")
install.packages("party")
library(party)
print(head(readingSkills))
# Create the input data frame. input.dat <- readingSkills[c(1:105),]
png(file = "decision_tree.png")
output.tree <- ctree(   nativeSpeaker ~ age + shoeSize + score,   data = input.dat)
plot(output.tree)
library(rpart) source("DataNormalization/DataEncryption.R") source("DecisionTreeAlgorithms/SystemParams.R") source("DataNormalization/PreprocessData.R")
algoData = preprocessData(encData)
source("DataNormalization/DataEncryption.R")
source("DataNormalization/ExtractDataModule.R")
library(rpart) source("DataNormalization/DataEncryption.R") source("DecisionTreeAlgorithms/SystemParams.R") source("DataNormalization/PreprocessData.R")
algoData = preprocessData(encData)
head(encData, 5)
algoData = preprocessData(encData)
head(encData, 5)
preprocessData = function(transformedData) {     transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:11]) }
algoData = preprocessData(encData) head(encData, 5)
head(transformedData, 5)
 connStr = paste("Driver=SQL Server;Server=", "DESKTOP-8MRGK1B", ";Database=", "MASTER_2018",  ";uid=mining_guest;pwd=Mining_18;", sep = "");
 inputQuery <- "SELECT [DSLS_SERVER]                       ,[LIC_TYPE]                       ,[COUNTRY]                       ,[CONTINENT]                       ,[OPERATING_SYSTEM]                       ,[LIC_USG]                       FROM [MASTER_2018].[dbo].[TB_MINING]"
obtainedData <- RxSqlServerData(sqlQuery = inputQuery, colClasses = c(#CELL_ID = "integer",  DSLS_SERVER = "string",  LIC_TYPE = "string",  COUNTRY = "string",  CONTINENT = "string",  OPERATING_SYSTEM = "string",  LIC_USG = "integer"  ), connectionString = connStr);
transformedData <- rxDataStep(inData = obtainedData);
head(transformedData, 5)
head(transformedData, 5)
preprocessData = function(transformedData) {     transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:10]) }
library(rpart) source("DataNormalization/DataEncryption.R") source("DecisionTreeAlgorithms/SystemParams.R") source("DataNormalization/PreprocessData.R")
algoData = preprocessData(encData)
head(encData, 5)
    transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:11]) }
preprocessData = function(transformedData) {     transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:10]) }
head(transformedData,5)
head(encData, 5)
preprocessData = function(transformedData) {     transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             usage = c(transformedData$LIC_USG),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:11]) }
algoData = preprocessData(encData)
    transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             usage = c(transformedData$LIC_USG),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:10]) }
preprocessData = function(transformedData) {     transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             usage = c(transformedData$LIC_USG),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:10]) }
algoData = preprocessData(encData)
preprocessData = function(transformedData) {     transformedData = transformedData %>% na.omit()     uniqueServers = unique(transformedData$Serv)     uniqueLics = unique(transformedData$Lics)     uniqueCountries = unique(transformedData$Count)     uniqueContinents = unique(transformedData$Conti)     uniqueOS = unique(transformedData$OS)     minedDataFrame = data.frame(servers = c(transformedData$Serv),                             lics = c(transformedData$Lics),                             countries = c(transformedData$Count),                             continents = c(transformedData$Conti),                             OS = c(transformedData$OS),                             stringsAsFactors = FALSE)     minedDataFrame$servers.num = as.numeric(factor(minedDataFrame$servers, levels = c(uniqueServers)))     minedDataFrame$lics.num = as.numeric(factor(minedDataFrame$lics, levels = c(uniqueLics)))     minedDataFrame$countries.num = as.numeric(factor(minedDataFrame$countries, levels = c(uniqueCountries)))     minedDataFrame$continents.num = as.numeric(factor(minedDataFrame$continents, levels = c(uniqueContinents)))     minedDataFrame$OS.num = as.numeric(factor(minedDataFrame$OS, levels = c(uniqueOS)))     return(minedDataFrame[, 6:10]) }
 algoData = preprocessData(encData)
head(encData, 5)
getDataFrame = function(data) {     data = data %>% na.omit()     typesServersno = length(unique(data$DSLS_SERVER))     typesLicsno = length(unique(data$LIC_TYPE))     typesCountriesno = length(unique(data$COUNTRY))     typesContinentsno = length(unique(data$CONTINENT))     typesOSno = length(unique(data$OPERATING_SYSTEM))     uniqueServers = unique(data$DSLS_SERVER)     uniqueLics = unique(data$LIC_TYPE)     uniqueCountries = unique(data$COUNTRY)     uniqueContinents = unique(data$CONTINENT)     uniqueOS = unique(data$OPERATING_SYSTEM)     saltServ = "server_"     saltLics = "licence_"     saltCount = "country_"     saltConti = "continent_"     saltOS = "os_"     vecServ = createArtificalDataVec(saltServ, typesServersno)     vecLics = createArtificalDataVec(saltLics, typesLicsno)     vecCount = createArtificalDataVec(saltCount, typesCountriesno)     vecConti = createArtificalDataVec(saltConti, typesContinentsno)     vecOS = createArtificalDataVec(saltOS, typesOSno)     Serv = getEncryptedVec(uniqueServers, vecServ, data$DSLS_SERVER)     Lics = getEncryptedVec(uniqueLics, vecLics, data$LIC_TYPE)     Conti = getEncryptedVec(uniqueContinents, vecConti, data$CONTINENT)     Count = getEncryptedVec(uniqueCountries, vecCount, data$COUNTRY)     OS = getEncryptedVec(uniqueOS, vecOS, data$OPERATING_SYSTEM)     dataFrame = data.frame(Serv, Lics, Conti, Count, OS, data$LIC_USG)     return(dataFrame) }
encData = getDataFrame(transformedData)
head(encData, 5)
getNumericToDF = function(dataFrame, numVec) {     dataFrame = data.frame(dataFrame, numVec)     return(dataFrame) }
encData = getNumericToDF(getDataFrame(transformedData), transformedData$LIC_USG)
head(encData, 5)
encData = getNumericToDF(getDataFrame(transformedData), transformedData$LIC_USG) head(encData, 5)
getDataFrame = function(data) {     data = data %>% na.omit()     typesServersno = length(unique(data$DSLS_SERVER))     typesLicsno = length(unique(data$LIC_TYPE))     typesCountriesno = length(unique(data$COUNTRY))     typesContinentsno = length(unique(data$CONTINENT))     typesOSno = length(unique(data$OPERATING_SYSTEM))     uniqueServers = unique(data$DSLS_SERVER)     uniqueLics = unique(data$LIC_TYPE)     uniqueCountries = unique(data$COUNTRY)     uniqueContinents = unique(data$CONTINENT)     uniqueOS = unique(data$OPERATING_SYSTEM)     saltServ = "server_"     saltLics = "licence_"     saltCount = "country_"     saltConti = "continent_"     saltOS = "os_"     vecServ = createArtificalDataVec(saltServ, typesServersno)     vecLics = createArtificalDataVec(saltLics, typesLicsno)     vecCount = createArtificalDataVec(saltCount, typesCountriesno)     vecConti = createArtificalDataVec(saltConti, typesContinentsno)     vecOS = createArtificalDataVec(saltOS, typesOSno)     Serv = getEncryptedVec(uniqueServers, vecServ, data$DSLS_SERVER)     Lics = getEncryptedVec(uniqueLics, vecLics, data$LIC_TYPE)     Conti = getEncryptedVec(uniqueContinents, vecConti, data$CONTINENT)     Count = getEncryptedVec(uniqueCountries, vecCount, data$COUNTRY)     OS = getEncryptedVec(uniqueOS, vecOS, data$OPERATING_SYSTEM)     dataFrame = data.frame(Serv, Lics, Conti, Count, OS)     return(dataFrame) } getNumericToDF = function(dataFrame, numVec) {     dataFrame = data.frame(dataFrame, numVec)     return(dataFrame) } encData = getNumericToDF(getDataFrame(transformedData), transformedData$LIC_USG) head(encData, 5)
algoData = preprocessData(encData)
head(encData, 5)
fit = rpart(encData$Lics ~ encData$Count, method = "class", data = encData)
printcp(fit) # display the results 
plotcp(fit) # visualize cross-validation results 
fit = rpart(encData$Lics ~ encData$Count, method = "class", data = encData)
printcp(fit) # display the results  plotcp(fit) # visualize cross-validation results  summary(fit) # detailed summary of splits
windows(record = TRUE, width = 10, height = 10)
plot(fit, uniform = TRUE, main = "Classification Tree for Project") text(fit, use.n = TRUE, all = TRUE, cex = .4)
post(fit, file = filePath,     title = "Classification Tree for Project")
getNumericToDF = function(dataFrame, licsUsage) {     dataFrame = data.frame(dataFrame, licsUsage)     return(dataFrame) }
 encData = getNumericToDF(getDataFrame(transformedData), transformedData$LIC_USG)
algoData = preprocessData(encData) head(encData, 5)
# encryption of data & creation of the data frame, which will store future data getDataFrame = function(data) {     data = data %>% na.omit()     typesServersno = length(unique(data$DSLS_SERVER))     typesLicsno = length(unique(data$LIC_TYPE))     typesCountriesno = length(unique(data$COUNTRY))     typesContinentsno = length(unique(data$CONTINENT))     typesOSno = length(unique(data$OPERATING_SYSTEM))     uniqueServers = unique(data$DSLS_SERVER)     uniqueLics = unique(data$LIC_TYPE)     uniqueCountries = unique(data$COUNTRY)     uniqueContinents = unique(data$CONTINENT)     uniqueOS = unique(data$OPERATING_SYSTEM)     saltServ = "server_"     saltLics = "licence_"     saltCount = "country_"     saltConti = "continent_"     saltOS = "os_"     vecServ = createArtificalDataVec(saltServ, typesServersno)     vecLics = createArtificalDataVec(saltLics, typesLicsno)     vecCount = createArtificalDataVec(saltCount, typesCountriesno)     vecConti = createArtificalDataVec(saltConti, typesContinentsno)     vecOS = createArtificalDataVec(saltOS, typesOSno)     Server = getEncryptedVec(uniqueServers, vecServ, data$DSLS_SERVER)     Licences = getEncryptedVec(uniqueLics, vecLics, data$LIC_TYPE)     Continent = getEncryptedVec(uniqueContinents, vecConti, data$CONTINENT)     Country = getEncryptedVec(uniqueCountries, vecCount, data$COUNTRY)     OS = getEncryptedVec(uniqueOS, vecOS, data$OPERATING_SYSTEM)     dataFrame = data.frame(Serv, Lics, Conti, Count, OS)     return(dataFrame) }
# including integer data, which won't be encrypted in previous step! getNumericToDF = function(dataFrame, LicencesUsage) {     dataFrame = data.frame(dataFrame, licsUsage)     return(dataFrame) }
encData = getNumericToDF(getDataFrame(transformedData), transformedData$LIC_USG)
# encryption of data & creation of the data frame, which will store future data getDataFrame = function(data) {     data = data %>% na.omit()     typesServersno = length(unique(data$DSLS_SERVER))     typesLicsno = length(unique(data$LIC_TYPE))     typesCountriesno = length(unique(data$COUNTRY))     typesContinentsno = length(unique(data$CONTINENT))     typesOSno = length(unique(data$OPERATING_SYSTEM))     uniqueServers = unique(data$DSLS_SERVER)     uniqueLics = unique(data$LIC_TYPE)     uniqueCountries = unique(data$COUNTRY)     uniqueContinents = unique(data$CONTINENT)     uniqueOS = unique(data$OPERATING_SYSTEM)     saltServ = "server_"     saltLics = "licence_"     saltCount = "country_"     saltConti = "continent_"     saltOS = "os_"     vecServ = createArtificalDataVec(saltServ, typesServersno)     vecLics = createArtificalDataVec(saltLics, typesLicsno)     vecCount = createArtificalDataVec(saltCount, typesCountriesno)     vecConti = createArtificalDataVec(saltConti, typesContinentsno)     vecOS = createArtificalDataVec(saltOS, typesOSno)     Server = getEncryptedVec(uniqueServers, vecServ, data$DSLS_SERVER)     Licences = getEncryptedVec(uniqueLics, vecLics, data$LIC_TYPE)     Continent = getEncryptedVec(uniqueContinents, vecConti, data$CONTINENT)     Country = getEncryptedVec(uniqueCountries, vecCount, data$COUNTRY)     OS = getEncryptedVec(uniqueOS, vecOS, data$OPERATING_SYSTEM)     dataFrame = data.frame(Server, Licences, Continent, Country, OS)     return(dataFrame) }
getNumericToDF = function(dataFrame, LicencesUsage) {     dataFrame = data.frame(dataFrame, licsUsage)     return(dataFrame) }
encData = getNumericToDF(getDataFrame(transformedData), transformedData$LIC_USG)
getNumericToDF = function(dataFrame, LicencesUsage) {     dataFrame = data.frame(dataFrame, LicencesUsage)     return(dataFrame) }
encData = getNumericToDF(getDataFrame(transformedData), transformedData$LIC_USG)
encData$Licences
fit = rpart(encData$Licences ~ encData$Country + encData$LicencesUsage + encData$OS, method = "class", data = encData)
printcp(fit) # display the results 
plotcp(fit) # visualize cross-validation results 
plotcp(fit) # visualize cross-validation results 
summary(fit) # detailed summary of splits
windows(record = TRUE, width = 10, height = 10) plot(fit, uniform = TRUE, main = "Classification Tree for Project") text(fit, use.n = TRUE, all = TRUE, cex = .4)
post(fit, file = filePath,     title = "Classification Tree for Project")
# Create the input data frame. input.dat <- readingSkills[c(1:105),]
# Give the chart file a name. png(file = "decision_tree.png")
output.tree <- ctree(   nativeSpeaker ~ age + shoeSize + score,   data = input.dat)
plot(output.tree)
plotcp(output.tree)
plot(output.tree)
fit = rpart(encData$Licences ~ encData$Country + encData$LicencesUsage + encData$OS, method = "class", data = encData)
printcp(fit) # display the results  plotcp(fit) # visualize cross-validation results 
plotcp(fit)
plot(fit, uniform = TRUE, main = "Classification Tree for Project")
fit
fit = rpart(encData$Licences ~ encData$Country + encData$LicencesUsage, method = "class", data = encData, minsplit = 2, minbucket = 1)
fit
fit
fit = rpart(encData$Licences ~ encData$Country + encData$LicencesUsage, method = "class", data = encData, minsplit = 1, minbucket = 1)
fit
fit
fit
fit = rpart(encData$Licences ~ encData$Country + encData$LicencesUsage, method = "class", data = encData, minsplit = 10, minbucket = 10)
fit
fit
library(rpart) library(rattle) library(rpart.plot) library(RColorBrewer)
install.packages("rattle")
download.packages('rattle')
install.packages('rattle')
library(rattle)
install.packages('RColorBrewer')
install.packages('rattle')
rattle
install.packages("rattle")
library(magrittr)
